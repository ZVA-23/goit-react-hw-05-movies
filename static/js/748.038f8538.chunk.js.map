{"version":3,"file":"static/js/748.038f8538.chunk.js","mappings":"4SAGaA,EAAWC,EAAAA,GAAAA,IAAH,6FAMRC,EAAOD,EAAAA,GAAAA,KAAH,mUAaJE,EAAQF,EAAAA,GAAAA,MAAH,oRAiBLG,EAAUH,EAAAA,GAAAA,OAAH,ohBAqBPI,EAAaJ,EAAAA,GAAAA,GAAH,4LAWVK,EAAaL,EAAAA,GAAAA,GAAH,6dAmBVM,GAAaN,EAAAA,EAAAA,IAAOO,EAAAA,GAAPP,CAAH,kDAIVQ,EAAYR,EAAAA,GAAAA,IAAH,+KAUTS,EAAcT,EAAAA,GAAAA,IAAH,4K,SCPxB,EAjFmB,WACjB,OAA4BU,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCL,EAAAA,EAAAA,WAAS,GAA3C,eAAOM,EAAP,KAAkBC,EAAlB,KACA,GAA0BP,EAAAA,EAAAA,UAAS,MAAnC,eAAOQ,EAAP,KAAcC,EAAd,KAEMC,EAAaN,EAAaO,IAAI,SAE9BC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WAAM,wCAGd,qFACEP,GAAa,GADf,UAEQQ,EAAAA,EAAAA,IAAmBL,GACtBM,MAAK,SAAAC,GACJf,EAAUe,GACLA,EAAKC,QACRT,GAAS,EAEZ,IACAU,MAAMV,GACNW,SAAQ,WACPb,GAAa,EACd,IAZL,4CAHc,sBACK,OAAfG,GAAsC,KAAfA,GADb,mCAiBdW,EACD,GAAE,CAACX,IACJY,QAAQC,IAAItB,GAUZ,OACE,iCACE,SAACZ,EAAD,WACE,UAACE,EAAD,CAAMiC,SAXS,SAAAC,GACnBA,EAAIC,iBACJ,IAAMC,EAAOF,EAAIG,OACjBvB,EAAgB,CAAEwB,MAAOF,EAAKG,SAASC,UAAUC,QACjDL,EAAKM,QACLxB,GAAS,EACV,EAKK,WACE,SAACjB,EAAD,CACE0C,KAAK,OACLC,KAAK,YACLC,aAAa,MACbC,YAAY,mBAEd,SAAC5C,EAAD,CAASyC,KAAK,SAAd,yBAGHjC,IACC,SAACP,EAAD,UACGO,EAAOqC,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACxB,OACE,SAAC9C,EAAD,CAEE+C,QAAS,YACPC,EAAAA,EAAAA,IAAgBJ,EACjB,EAJH,UAME,UAAC3C,EAAD,CAAYgD,GAAE,kBAAaL,GAAMM,MAAO,CAAEC,KAAMlC,GAAhD,WACE,SAACd,EAAD,CACEiD,IAAG,0CAAqCN,GACxCO,IAAKR,KAEP,SAACzC,EAAD,WACE,wBAAKyC,UAXJD,EAgBV,MAGJ/B,IAAS,wDACTF,IAAa,SAAC2C,EAAA,EAAD,MAGnB,C","sources":["pages/MoviesPage/MoviesPage.styled.js","pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const FormInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  justify-content: center;\n  min-width: 400px;\n  margin-top: 5px;\n  height: 40px;\n  overflow: hidden;\n  background-color: #fff;\n  border-radius: 3px;\n  box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 20%),\n    0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);\n`;\n\nexport const Input = styled.input`\n  display: inline-block;\n  width: 100%;\n  padding-left: 4px;\n  padding-right: 4px;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n\n  &::placeholder {\n    color: #3f51b550;\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n\nexport const FormBtn = styled.button`\n  display: inline-block;\n  border: 0;\n  /* background-image: url('/src/images/icons-search.svg'); */\n  /* background-image: url('https://image.flaticon.com/icons/svg/149/149852.svg'); */\n  /* background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center; */\n  background-color: #3f51b542;\n  font-size: 400;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  cursor: pointer;\n  outline: none;\n  color: #3f51b5;\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const MoviesList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  max-width: 100%;\n  margin-top: 0;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 0;\n`;\n\nexport const MoviesItem = styled.li`\n  display: inline-block;\n  width: 100%;\n  max-width: 200px;\n  margin: 10px;\n  text-decoration: none;\n  color: black;\n  background: rgb(255, 255, 255);\n  box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 20%),\n    0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);\n  border-radius: 5px;\n  transition-duration: 300ms;\n  &:hover {\n    cursor: pointer;\n    transform: scale(1.03);\n    box-shadow: rgb(0 0 0 / 8%) 0px 10px 25px;\n  }\n`;\n\nexport const MoviesLink = styled(Link)`\n  text-decoration: none;\n`;\n\nexport const MoviesImg = styled.img`\n  display: block;\n  height: 260px;\n  width: 100%;\n  padding: 0px;\n  margin: 0px;\n  border-top-left-radius: 5px;\n  border-top-right-radius: 5px;\n`;\n\nexport const MoviesTitle = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  padding: 5px;\n  margin: 0px;\n  font-size: 10px;\n  color: #3f51b5;\n`;\n","import { Loader } from 'components/Loader/Loader';\nimport { useState, useEffect } from 'react';\nimport { fetchMoviesByQuery, fetchMoviesById } from '../../servises/moviesApi';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport {\n  FormInfo,\n  Form,\n  Input,\n  FormBtn,\n  MoviesList,\n  MoviesItem,\n  MoviesLink,\n  MoviesImg,\n  MoviesTitle,\n} from './MoviesPage.styled';\n\nconst MoviesPage = () => {\n  const [movies, setMovies] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const serchQuery = searchParams.get('query');\n  // console.log(serchQuery);\n  const location = useLocation();\n\n  useEffect(() => {\n    if (serchQuery === null || serchQuery === '') return;\n\n    async function fetchQuery() {\n      setIsLoading(true);\n      await fetchMoviesByQuery(serchQuery)\n        .then(data => {\n          setMovies(data);\n          if (!data.length) {\n            setError(true);\n          }\n        })\n        .catch(setError)\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n    fetchQuery();\n  }, [serchQuery]);\n  console.log(movies);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.target;\n    setSearchParams({ query: form.elements.queryName.value });\n    form.reset();\n    setError(false);\n  };\n\n  return (\n    <>\n      <FormInfo>\n        <Form onSubmit={handleSubmit}>\n          <Input\n            type=\"text\"\n            name=\"queryName\"\n            autoComplete=\"off\"\n            placeholder=\"Search movies\"\n          />\n          <FormBtn type=\"submit\">Search</FormBtn>\n        </Form>\n      </FormInfo>\n      {movies && (\n        <MoviesList>\n          {movies.map(({ id, title, poster_path }) => {\n            return (\n              <MoviesItem\n                key={id}\n                onClick={() => {\n                  fetchMoviesById(id);\n                }}\n              >\n                <MoviesLink to={`/movies/${id}`} state={{ from: location }}>\n                  <MoviesImg\n                    src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n                    alt={title}\n                  />\n                  <MoviesTitle>\n                    <h3>{title}</h3>\n                  </MoviesTitle>\n                </MoviesLink>\n              </MoviesItem>\n            );\n          })}\n        </MoviesList>\n      )}\n      {error && <p>No results for your request!</p>}\n      {isLoading && <Loader />}\n    </>\n  );\n};\nexport default MoviesPage;\n"],"names":["FormInfo","styled","Form","Input","FormBtn","MoviesList","MoviesItem","MoviesLink","Link","MoviesImg","MoviesTitle","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","isLoading","setIsLoading","error","setError","serchQuery","get","location","useLocation","useEffect","fetchMoviesByQuery","then","data","length","catch","finally","fetchQuery","console","log","onSubmit","evt","preventDefault","form","target","query","elements","queryName","value","reset","type","name","autoComplete","placeholder","map","id","title","poster_path","onClick","fetchMoviesById","to","state","from","src","alt","Loader"],"sourceRoot":""}