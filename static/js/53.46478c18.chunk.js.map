{"version":3,"file":"static/js/53.46478c18.chunk.js","mappings":"kQAEaA,EAAgBC,EAAAA,GAAAA,IAAH,sSAWbC,EAAWD,EAAAA,GAAAA,GAAH,2NAYRE,EAAWF,EAAAA,GAAAA,GAAH,wWAcRG,EAAUH,EAAAA,GAAAA,IAAH,+KAUPI,EAAkBJ,EAAAA,GAAAA,IAAH,gGAOfK,EAAWL,EAAAA,GAAAA,GAAH,wCAIRM,EAAgBN,EAAAA,GAAAA,EAAH,wC,SCA1B,EA9CiB,WACf,OAAwBO,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAYR,OAVAE,EAAAA,EAAAA,YAAU,WACRL,GAAa,IACbM,EAAAA,EAAAA,IAAeH,GACZI,MAAK,SAAAC,GAAI,OAAIV,EAAQU,EAAZ,IACTC,MAAMP,GACNQ,SAAQ,WACPV,GAAa,EACd,GACJ,GAAE,CAACG,IACJQ,QAAQC,IAAIf,IAEV,UAACT,EAAD,WACGS,EAAKgB,OAAS,IACb,SAACvB,EAAD,UACGO,EAAKiB,KAAI,YAAqD,IAA9CC,EAA6C,EAAjDC,GAAaC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UAC5C,OACE,UAAC5B,EAAD,YACE,SAACC,EAAD,CACE4B,IACEF,EAAY,0CAC2BA,GACnC,2DAENG,IAAG,UAAKJ,GACRK,MAAM,WAER,UAAC7B,EAAD,YACE,SAACC,EAAD,UAAWuB,KACX,UAACtB,EAAD,yBAA2BwB,UAZhBJ,EAgBlB,MAGJd,IAAS,kEACTF,IAAa,SAACwB,EAAA,EAAD,MAGnB,C","sources":["pages/CastPage/CastPage.styled.js","pages/CastPage/CastPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 30px;\n  background-color: #3f51b542;\n  margin: 20px 30px 30px;\n  box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 20%),\n    0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);\n`;\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  max-width: 100%;\n  margin-top: 0;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 0;\n  transition-duration: 300ms;\n`;\n\nexport const CastItem = styled.li`\n  display: inline-block;\n  text-decoration: none;\n  width: 100%;\n  max-width: 200px;\n  margin: 10px;\n  background: rgb(255, 255, 255);\n  color: black;\n  box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 20%),\n    0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);\n  border-radius: 5px;\n  transition-duration: 300ms;\n`;\n\nexport const CastImg = styled.img`\n  display: block;\n  padding: 0px;\n  margin: 0px;\n  height: 260px;\n  width: 100%;\n  border-top-left-radius: 5px;\n  border-top-right-radius: 5px;\n`;\n\nexport const CastDescription = styled.div`\n  padding: 5px;\n  margin: 0px;\n  font-size: 10px;\n  color: #3f51b5;\n`;\n\nexport const CastName = styled.h3`\n  margin: 0px;\n`;\n\nexport const CastCharacter = styled.p`\n  margin: 0px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport { fetchMovieCast } from '../../servises/moviesApi';\nimport {\n  CastContainer,\n  CastList,\n  CastItem,\n  CastImg,\n  CastDescription,\n  CastName,\n  CastCharacter,\n} from './CastPage.styled';\n\nconst CastPage = () => {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetchMovieCast(movieId)\n      .then(data => setCast(data))\n      .catch(setError)\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [movieId]);\n  console.log(cast);\n  return (\n    <CastContainer>\n      {cast.length > 0 && (\n        <CastList>\n          {cast.map(({ id: cast_id, name, profile_path, character }) => {\n            return (\n              <CastItem key={cast_id}>\n                <CastImg\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                      : 'https://www.freeiconspng.com/uploads/no-image-icon-7.gif'\n                  }\n                  alt={`${name}`}\n                  width=\"100px\"\n                />\n                <CastDescription>\n                  <CastName>{name}</CastName>\n                  <CastCharacter>Character: {character}</CastCharacter>\n                </CastDescription>\n              </CastItem>\n            );\n          })}\n        </CastList>\n      )}\n      {error && <p>We don`t have any cast for this movie.</p>}\n      {isLoading && <Loader />}\n    </CastContainer>\n  );\n};\nexport default CastPage;\n"],"names":["CastContainer","styled","CastList","CastItem","CastImg","CastDescription","CastName","CastCharacter","useState","cast","setCast","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","fetchMovieCast","then","data","catch","finally","console","log","length","map","cast_id","id","name","profile_path","character","src","alt","width","Loader"],"sourceRoot":""}